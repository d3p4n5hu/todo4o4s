{"version":3,"sources":["actions/index.js","components/TextField.js","components/HashTag.js","components/TodoItem.js","utils/helpers.js","containers/Home.js","App.js","reducers/index.js","serviceWorker.js","index.js"],"names":["ADD_TODO","TOGGLE_TODO","RESET_TODO","TextField","props","onSubmit","other","type","onKeyPress","HashTag","className","onClick","e","stopPropagation","onHashTagClick","text","TodoItem","children","item","split","hashTags","length","arr1","arr2","result","i","push","joinAlternatively","map","index","key","style","textDecoration","completedAt","id","Home","state","filter","onToDoChange","bind","onTodoClick","onResetClick","onResetFilterClick","target","value","this","setState","addTodo","toggleTodo","resetTodo","tag","includes","concat","Date","toDateString","todos","placeholder","onChange","marginBottom","some","x","sort","itemOne","itemTwo","createdAt","textAlign","letterSpacing","React","Component","connect","dispatch","App","initialState","localStorage","getItem","JSON","parse","saveStateToLocalStorage","window","setItem","stringify","alert","todoApp","newState","str","action","newTodo","uuid","match","Boolean","location","hostname","store","createStore","todosApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.019adb6b.chunk.js","sourcesContent":["export const ADD_TODO = 'ADD_TODO';\nexport const TOGGLE_TODO = 'TOGGLE_TODO';\nexport const RESET_TODO = 'RESET_TODO';\n\nexport const addTodo = text => ({\n    type: ADD_TODO,\n    text,\n});\n\nexport const toggleTodo = id => ({\n    type: TOGGLE_TODO,\n    id,\n});\nexport const resetTodo = id => ({\n    type: RESET_TODO,\n});\n","import React from 'react';\n\nconst TextField = props => {\n    const { onSubmit, ...other } = props;\n\n    return <input type=\"text\" onKeyPress={onSubmit} {...other} />;\n};\n\nexport default TextField;\n","import React from 'react';\n\nconst HashTag = props => (\n    <span\n        className=\"hashtag\"\n        onClick={e => {\n            e.stopPropagation();\n            props.onHashTagClick(props.text);\n        }}\n    >\n        {props.text}\n    </span>\n);\n\nexport default HashTag;\n","import React from 'react';\nimport { joinAlternatively } from '../utils/helpers';\nimport HashTag from './HashTag';\n\nconst TodoItem = props => {\n    let children = props.item.text.split(/#\\w+/g);\n\n    if (props.item.hashTags.length > 0) {\n        children = joinAlternatively(\n            children,\n            props.item.hashTags.map((item, index) => (\n                <HashTag\n                    key={index}\n                    text={item}\n                    onHashTagClick={props.onHashTagClick}\n                />\n            ))\n        );\n    }\n\n    return (\n        <li\n            className=\"todo-item\"\n            style={{\n                textDecoration: props.item.completedAt ? 'line-through' : '',\n            }}\n            onClick={() => props.onClick(props.item.id)}\n        >\n            {children}\n        </li>\n    );\n};\n\nexport default TodoItem;\n","export function joinAlternatively(arr1, arr2) {\n    let result = [];\n    for (let i = 0; i < arr1.length - 1; i++) {\n        result = [...result, arr1[i], arr2[i]];\n    }\n    result.push(arr1[arr1.length - 1]);\n    return result;\n}\n\nexport function extractHashTags(str) {\n    return str.match(/#\\w+/g) || [];\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo, toggleTodo, resetTodo } from '../actions';\nimport TextField from '../components/TextField';\nimport TodoItem from '../components/TodoItem';\nimport '../styles/index.scss';\nimport HashTag from '../components/HashTag';\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: '',\n            filter: [],\n        };\n        this.onToDoChange = this.onToDoChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.onTodoClick = this.onTodoClick.bind(this);\n        this.onResetClick = this.onResetClick.bind(this);\n        this.onHashTagClick = this.onHashTagClick.bind(this);\n        this.onResetFilterClick = this.onResetFilterClick.bind(this);\n    }\n\n    onToDoChange(e) {\n        const text = e.target.value;\n        this.setState(() => ({ text }));\n    }\n\n    onSubmit(e) {\n        if (e.key === 'Enter' && this.state.text) {\n            this.props.addTodo(this.state.text);\n            this.setState(() => ({ text: '' }));\n        }\n    }\n\n    onTodoClick(id) {\n        this.props.toggleTodo(id);\n    }\n\n    onResetClick() {\n        this.props.resetTodo();\n        this.setState(() => ({ filter: [] }));\n    }\n\n    onHashTagClick(tag) {\n        const filter = this.state.filter.includes(tag)\n            ? this.state.filter.filter(item => item !== tag)\n            : this.state.filter.concat(tag);\n\n        this.setState(() => ({ filter }));\n    }\n\n    onResetFilterClick() {\n        this.setState(() => ({ filter: [] }));\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"header\">\n                    <div className=\"date-wrapper\">\n                        <div className=\"today\">{new Date().toDateString()}</div>\n                        <div className=\"active-tasks\">\n                            {\n                                this.props.todos.filter(\n                                    item => !item.completedAt\n                                ).length\n                            }{' '}\n                            Active Tasks\n                        </div>\n                    </div>\n                    <div className=\"reset-wrapper\">\n                        <button\n                            className=\"reset-button\"\n                            onClick={this.onResetClick}\n                        >\n                            Reset\n                        </button>\n                    </div>\n                </div>\n                <div>\n                    <TextField\n                        className=\"text-input\"\n                        placeholder=\"Enter a task... &#9166; \"\n                        value={this.state.text}\n                        onChange={this.onToDoChange}\n                        onSubmit={this.onSubmit}\n                    />\n                </div>\n                <div\n                    className=\"hashtag-filter-wrapper\"\n                    style={{\n                        marginBottom:\n                            this.state.filter.length > 0 ? '0' : '12px',\n                    }}\n                >\n                    {this.state.filter.length > 0 &&\n                        this.state.filter.map((item, index) => (\n                            <HashTag\n                                key={index}\n                                text={item}\n                                onHashTagClick={this.onHashTagClick}\n                            />\n                        ))}\n                </div>\n                {this.props.todos.length > 0 && (\n                    <div>\n                        <hr />\n                        <ul className=\"todo-item-wrapper\">\n                            {this.props.todos\n                                .filter(\n                                    item =>\n                                        !item.completedAt &&\n                                        (!this.state.filter.length ||\n                                            item.hashTags.some(x =>\n                                                this.state.filter.includes(x)\n                                            ))\n                                )\n                                .sort((itemOne, itemTwo) =>\n                                    itemOne.createdAt > itemTwo.createdAt\n                                        ? -1\n                                        : 1\n                                )\n                                .map(item => (\n                                    <TodoItem\n                                        key={item.id}\n                                        item={item}\n                                        onClick={this.onTodoClick}\n                                        onHashTagClick={this.onHashTagClick}\n                                    />\n                                ))}\n                            {this.props.todos\n                                .filter(\n                                    item =>\n                                        !!item.completedAt &&\n                                        (!this.state.filter.length ||\n                                            item.hashTags.some(x =>\n                                                this.state.filter.includes(x)\n                                            ))\n                                )\n                                .sort((itemOne, itemTwo) =>\n                                    itemOne.completedAt > itemTwo.completedAt\n                                        ? -1\n                                        : 1\n                                )\n                                .map(item => (\n                                    <TodoItem\n                                        key={item.id}\n                                        item={item}\n                                        onClick={this.onTodoClick}\n                                        onHashTagClick={this.onHashTagClick}\n                                    />\n                                ))}\n                        </ul>\n                    </div>\n                )}\n                {this.props.todos.length === 0 && (\n                    <p style={{ textAlign: 'center', letterSpacing: '5px' }}>\n                        ----You're all clear----\n                    </p>\n                )}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    todos: state.todos,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    addTodo: text => dispatch(addTodo(text)),\n    toggleTodo: id => dispatch(toggleTodo(id)),\n    resetTodo: id => dispatch(resetTodo(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React from 'react';\nimport Home from './containers/Home';\n\nconst App = () => <Home />;\n\nexport default App;\n","import uuid from 'uuid';\nimport { ADD_TODO, TOGGLE_TODO, RESET_TODO } from '../actions';\nimport { extractHashTags } from '../utils/helpers';\n\nconst initialState = {\n    todos: localStorage.getItem('todos')\n        ? JSON.parse(localStorage.getItem('todos'))\n        : [],\n};\n\nfunction saveStateToLocalStorage(todos) {\n    if (window.localStorage) {\n        localStorage.setItem('todos', JSON.stringify(todos));\n    } else {\n        alert(\"Your browser doesn't support local storage\");\n    }\n}\n\nfunction todoApp(state = initialState, action) {\n    let newState;\n    switch (action.type) {\n        case ADD_TODO:\n            const newTodo = {\n                id: uuid(),\n                text: action.text,\n                hashTags: extractHashTags(action.text),\n                createdAt: new Date(),\n                completedAt: null,\n            };\n            newState = {\n                todos: state.todos.concat(newTodo),\n            };\n            saveStateToLocalStorage(newState.todos);\n            return newState;\n        case TOGGLE_TODO:\n            newState = {\n                todos: state.todos.map(item => {\n                    if (item.id === action.id) {\n                        return {\n                            ...item,\n                            completedAt: item.completedAt ? null : new Date(),\n                        };\n                    }\n                    return item;\n                }),\n            };\n            saveStateToLocalStorage(newState.todos);\n            return newState;\n        case RESET_TODO:\n            saveStateToLocalStorage([]);\n            return {\n                todos: [],\n            };\n        default:\n            return state;\n    }\n}\n\nexport default todoApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport './styles/index.scss';\nimport App from './App';\nimport todosApp from './reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(todosApp);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}